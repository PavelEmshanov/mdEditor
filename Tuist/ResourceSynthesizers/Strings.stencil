// swiftlint:disable all
// swift-format-ignore-file
// swiftformat:disable all
// Generated using tuist â€” https://github.com/tuist/tuist

{% if tables.count > 0 %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% set bundleToken %}{{param.name}}Resources{% endset %}
import Foundation

// MARK: - Strings

// swiftlint:disable superfluous_disable_command
// swiftlint:disable file_length implicit_return
// swiftlint:disable explicit_type_interface function_parameter_count
// swiftlint:disable identifier_name line_length nesting type_body_length type_name

{% macro parametersBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    {% if type == "String" %}
    _ p{{forloop.counter}}: Any
    {% else %}
    _ p{{forloop.counter}}: {{type}}
    {% endif %}
    {{ ", " if not forloop.last }}
  {% endfor %}
{% endfilter %}{% endmacro %}

{% macro argumentsBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    {% if type == "String" %}
    String(describing: p{{forloop.counter}})
    {% elif type == "UnsafeRawPointer" %}
    Int(bitPattern: p{{forloop.counter}})
    {% else %}
    p{{forloop.counter}}
    {% endif %}
    {{ ", " if not forloop.last }}
  {% endfor %}
{% endfilter %}{% endmacro %}

{% macro recursiveBlock table item %}
  {% for string in item.strings %}
  {% if not param.noComments and string.translation %}
  /// {{string.translation}}
  {% endif %}
  {% if string.types %}
  {{accessModifier}} static func {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}(
    {% call parametersBlock string.types %}
  ) -> String {
    return {{enumName}}.tr("{{table}}", "{{string.key}}", {% call argumentsBlock string.types %})
  }
  {% elif param.lookupFunction %}
  {{accessModifier}} static var {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}: String {
    return {{enumName}}.tr("{{table}}", "{{string.key}}")
  }
  {% else %}
  {{accessModifier}} static let {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{enumName}}.tr("{{table}}", "{{string.key}}")
  {% endif %}
  {% endfor %}
  
  {% for child in item.children %}
  {{accessModifier}} enum {{child.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% filter indent:2 %}{% call recursiveBlock table child %}{% endfilter %}
  }
  {% endfor %}
{% endmacro %}

{% set enumName %}L10n{% endset %}
{{accessModifier}} enum {{enumName}} {
  {% if tables.count > 1 or param.forceFileNameEnum %}
    {% for table in tables %}
    {{accessModifier}} enum {{table.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
      {% filter indent:2 %}{% call recursiveBlock table.name table.levels %}{% endfilter %}
    }
    {% endfor %}
  {% else %}
    {% call recursiveBlock tables.first.name tables.first.levels %}
  {% endif %}
}

// MARK: - Implementation Details

extension {{enumName}} {
  private static func tr(
    _ table: String,
    _ key: String,
    _ args: CVarArg...,
    locale: Locale = .current
  ) -> String {
    {% if param.lookupFunction %}
    let format = {{ param.lookupFunction }}(key, table)
    {% else %}
    let format = {{bundleToken}}.bundle.localizedString(forKey: key, value: nil, table: table)
    {% endif %}
    return String(format: format, locale: locale, arguments: args)
  }
}

{% if not param.lookupFunction %}
// swiftlint:disable convenience_type
private final class BundleToken {
  static let bundle: Bundle = {
    #if SWIFT_PACKAGE
    return Bundle.module
    #else
    return Bundle(for: BundleToken.self)
    #endif
  }()
}
{% endif %}
{% else %}
// No strings found
{% endif %}

// swiftlint:enable all
// swiftformat:enable all